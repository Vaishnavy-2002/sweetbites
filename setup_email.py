#!/usr/bin/env python3
"""
Quick Email Setup Script for SweetBite
This script helps you quickly configure email settings for password reset functionality.
"""

import os
import sys

def create_env_file():
    """Create a .env file with email configuration"""
    print("üç∞ SweetBite Email Setup")
    print("=" * 30)
    print()
    
    print("This script will help you set up email sending for password reset functionality.")
    print("You'll need a Gmail account with 2-factor authentication enabled.")
    print()
    
    # Get email credentials from user
    email = input("Enter your Gmail address (e.g., sweetbite.bakery@gmail.com): ").strip()
    if not email:
        print("‚ùå Email address is required!")
        return False
    
    print()
    print("To get your Gmail app password:")
    print("1. Go to https://myaccount.google.com/security")
    print("2. Enable 2-Step Verification if not already enabled")
    print("3. Go to 'App passwords' under 2-Step Verification")
    print("4. Generate a new app password for 'Mail'")
    print("5. Copy the 16-character password (e.g., 'abcd efgh ijkl mnop')")
    print()
    
    app_password = input("Enter your Gmail app password: ").strip()
    if not app_password:
        print("‚ùå App password is required!")
        return False
    
    # Create .env file
    env_content = f"""# SweetBite Email Configuration
# Generated by email setup script

EMAIL_HOST_USER={email}
EMAIL_HOST_PASSWORD={app_password}
DEFAULT_FROM_EMAIL=SweetBite Bakery <{email}>
SERVER_EMAIL={email}
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Created .env file with email configuration")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {str(e)}")
        return False

def update_settings():
    """Update settings.py to use environment variables"""
    settings_path = 'backend/sweetbite_backend/settings.py'
    
    if not os.path.exists(settings_path):
        print(f"‚ùå Settings file not found: {settings_path}")
        return False
    
    try:
        with open(settings_path, 'r') as f:
            content = f.read()
        
        # Check if dotenv is already imported
        if 'from dotenv import load_dotenv' not in content:
            # Add dotenv import at the top
            lines = content.split('\n')
            import_line = -1
            for i, line in enumerate(lines):
                if line.startswith('import ') or line.startswith('from '):
                    import_line = i
            
            if import_line >= 0:
                lines.insert(import_line + 1, 'from dotenv import load_dotenv')
                lines.insert(import_line + 2, 'load_dotenv()')
            else:
                lines.insert(0, 'from dotenv import load_dotenv')
                lines.insert(1, 'load_dotenv()')
            
            content = '\n'.join(lines)
        
        # Update email settings
        email_settings = """# Email settings - Real email sending via Gmail SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'sweetbite.bakery@gmail.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'your-app-password')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'SweetBite Bakery <sweetbite.bakery@gmail.com>')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'sweetbite.bakery@gmail.com')"""
        
        # Replace email settings section
        import re
        pattern = r'# Email settings.*?(?=\n# [A-Z]|\n[A-Z]|\Z)'
        content = re.sub(pattern, email_settings, content, flags=re.DOTALL)
        
        with open(settings_path, 'w') as f:
            f.write(content)
        
        print(f"‚úÖ Updated {settings_path} to use environment variables")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to update settings: {str(e)}")
        return False

def install_dotenv():
    """Install python-dotenv package"""
    print("üì¶ Installing python-dotenv package...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', 'python-dotenv'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ python-dotenv installed successfully")
            return True
        else:
            print(f"‚ùå Failed to install python-dotenv: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error installing python-dotenv: {str(e)}")
        return False

def main():
    """Main setup function"""
    print("üöÄ Starting SweetBite email setup...")
    print()
    
    # Check if we're in the right directory
    if not os.path.exists('backend'):
        print("‚ùå Please run this script from the SweetBite project root directory")
        return
    
    # Install dotenv
    if not install_dotenv():
        print("‚ö†Ô∏è  Continuing without dotenv (you'll need to install it manually)")
    
    # Create .env file
    if not create_env_file():
        return
    
    # Update settings
    if not update_settings():
        return
    
    print()
    print("üéâ Email setup completed successfully!")
    print()
    print("Next steps:")
    print("1. Restart your Django server")
    print("2. Test email sending by going to /forgot-password")
    print("3. Check your email inbox for the password reset email")
    print()
    print("If you encounter issues:")
    print("- Check that 2FA is enabled on your Gmail account")
    print("- Verify the app password is correct")
    print("- Check your spam folder")
    print("- Run 'python test_email_config.py' to test the configuration")

if __name__ == "__main__":
    main()
